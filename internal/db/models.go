// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Op string

const (
	OpRemove Op = "remove"
	OpAdd    Op = "add"
)

func (e *Op) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Op(s)
	case string:
		*e = Op(s)
	default:
		return fmt.Errorf("unsupported scan type for Op: %T", src)
	}
	return nil
}

type NullOp struct {
	Op    Op   `json:"op"`
	Valid bool `json:"valid"` // Valid is true if Op is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOp) Scan(value interface{}) error {
	if value == nil {
		ns.Op, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Op.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOp) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Op), nil
}

type Operation struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	SegmentSlug string             `json:"segment_slug"`
	OpType      Op                 `json:"op_type"`
	DoneAt      pgtype.Timestamptz `json:"done_at"`
}

type Segment struct {
	ID int32 `json:"id"`
	// segment unique name
	Slug string `json:"slug"`
	// probability of user to be added automatically to the segment, [0..1]
	AutoProb float32 `json:"auto_prob"`
}

type UserSegment struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	SegmentID int32              `json:"segment_id"`
	RemoveAt  pgtype.Timestamptz `json:"remove_at"`
}
