// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: operations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOperation = `-- name: CreateOperation :exec
INSERT INTO operations (
    user_id,
    segment_slug,
    op_type
) VALUES (
    $2, $3, $1
)
`

type CreateOperationParams struct {
	OpType      Op     `json:"op_type"`
	UserID      int32  `json:"user_id"`
	SegmentSlug string `json:"segment_slug"`
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) error {
	_, err := q.db.Exec(ctx, createOperation, arg.OpType, arg.UserID, arg.SegmentSlug)
	return err
}

const getOperations = `-- name: GetOperations :many
SELECT segment_slug, op_type, done_at FROM operations
WHERE user_id = $1 AND (done_at BETWEEN $2 AND $3)
`

type GetOperationsParams struct {
	UserID int32              `json:"user_id"`
	TsFrom pgtype.Timestamptz `json:"ts_from"`
	TsTo   pgtype.Timestamptz `json:"ts_to"`
}

type GetOperationsRow struct {
	SegmentSlug string             `json:"segment_slug"`
	OpType      Op                 `json:"op_type"`
	DoneAt      pgtype.Timestamptz `json:"done_at"`
}

func (q *Queries) GetOperations(ctx context.Context, arg GetOperationsParams) ([]GetOperationsRow, error) {
	rows, err := q.db.Query(ctx, getOperations, arg.UserID, arg.TsFrom, arg.TsTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOperationsRow{}
	for rows.Next() {
		var i GetOperationsRow
		if err := rows.Scan(&i.SegmentSlug, &i.OpType, &i.DoneAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
