// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_segments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserSegment = `-- name: AddUserSegment :exec
INSERT INTO user_segments (
    user_id,
    segment_id,
    remove_at
) VALUES (
    $1, $2, $3
)
`

type AddUserSegmentParams struct {
	UserID    int32              `json:"user_id"`
	SegmentID int32              `json:"segment_id"`
	RemoveAt  pgtype.Timestamptz `json:"remove_at"`
}

func (q *Queries) AddUserSegment(ctx context.Context, arg AddUserSegmentParams) error {
	_, err := q.db.Exec(ctx, addUserSegment, arg.UserID, arg.SegmentID, arg.RemoveAt)
	return err
}

type AddUserSegmentsParams struct {
	UserID    int32              `json:"user_id"`
	SegmentID int32              `json:"segment_id"`
	RemoveAt  pgtype.Timestamptz `json:"remove_at"`
}

const countUserSegments = `-- name: CountUserSegments :one
SELECT count(*) FROM user_segments
WHERE user_id = $1
`

func (q *Queries) CountUserSegments(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserSegments, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUserSegment = `-- name: DeleteUserSegment :exec
DELETE FROM user_segments
WHERE user_id = $1
`

func (q *Queries) DeleteUserSegment(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserSegment, userID)
	return err
}

const deleteUserSegments = `-- name: DeleteUserSegments :exec
DELETE FROM user_segments
WHERE user_id = ANY($1::int[])
`

func (q *Queries) DeleteUserSegments(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, deleteUserSegments, dollar_1)
	return err
}

const getUserSegments = `-- name: GetUserSegments :many
SELECT t.segment_id, slug, t.remove_at 
FROM (
    SELECT segment_id, remove_at FROM user_segments
    WHERE user_id = $1
) AS t
INNER JOIN segments
ON t.segment_id = segments.id
`

type GetUserSegmentsRow struct {
	SegmentID int32              `json:"segment_id"`
	Slug      string             `json:"slug"`
	RemoveAt  pgtype.Timestamptz `json:"remove_at"`
}

func (q *Queries) GetUserSegments(ctx context.Context, userID int32) ([]GetUserSegmentsRow, error) {
	rows, err := q.db.Query(ctx, getUserSegments, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserSegmentsRow{}
	for rows.Next() {
		var i GetUserSegmentsRow
		if err := rows.Scan(&i.SegmentID, &i.Slug, &i.RemoveAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
