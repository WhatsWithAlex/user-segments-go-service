// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: operations.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOperation = `-- name: CreateOperation :exec
INSERT INTO
    operations (user_id, segment_slug, op_type)
VALUES
    ($2, $3, $1)
`

type CreateOperationParams struct {
	OpType      Op     `json:"op_type"`
	UserID      int32  `json:"user_id"`
	SegmentSlug string `json:"segment_slug"`
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) error {
	_, err := q.db.Exec(ctx, createOperation, arg.OpType, arg.UserID, arg.SegmentSlug)
	return err
}

const createOperationWithTS = `-- name: CreateOperationWithTS :exec
INSERT INTO
    operations (user_id, segment_slug, op_type, done_at)
VALUES
    ($2, $3, $1, $4)
`

type CreateOperationWithTSParams struct {
	OpType      Op                 `json:"op_type"`
	UserID      int32              `json:"user_id"`
	SegmentSlug string             `json:"segment_slug"`
	DoneAt      pgtype.Timestamptz `json:"done_at"`
}

func (q *Queries) CreateOperationWithTS(ctx context.Context, arg CreateOperationWithTSParams) error {
	_, err := q.db.Exec(ctx, createOperationWithTS,
		arg.OpType,
		arg.UserID,
		arg.SegmentSlug,
		arg.DoneAt,
	)
	return err
}

const getOperationsByUserID = `-- name: GetOperationsByUserID :many
SELECT
    segment_slug,
    op_type,
    done_at
FROM
    operations
WHERE
    user_id = $1
    AND (
        done_at BETWEEN $2
        AND $3
    )
`

type GetOperationsByUserIDParams struct {
	UserID int32              `json:"user_id"`
	FromTS pgtype.Timestamptz `json:"from_ts"`
	ToTS   pgtype.Timestamptz `json:"to_ts"`
}

type GetOperationsByUserIDRow struct {
	SegmentSlug string             `json:"segment_slug"`
	OpType      Op                 `json:"op_type"`
	DoneAt      pgtype.Timestamptz `json:"done_at"`
}

func (q *Queries) GetOperationsByUserID(ctx context.Context, arg GetOperationsByUserIDParams) ([]GetOperationsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getOperationsByUserID, arg.UserID, arg.FromTS, arg.ToTS)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOperationsByUserIDRow{}
	for rows.Next() {
		var i GetOperationsByUserIDRow
		if err := rows.Scan(&i.SegmentSlug, &i.OpType, &i.DoneAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
